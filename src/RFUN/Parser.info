-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.10 from RFUN/Parser.y
-----------------------------------------------------------------------------


terminal '=' is unused
terminal '(' is unused
terminal ')' is unused
terminal '->' is unused
terminal '|' is unused
terminal ',' is unused
terminal let is unused
terminal in is unused
terminal case is unused
terminal of is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_prog -> Prog                                (0)
	Prog -> ProgDefns                                  (1)
	ProgDefns ->                                       (2)
	ProgDefns -> Defn ProgDefns                        (3)
	Defn -> def id Ids ':=' Exp                        (4)
	Ids ->                                             (5)
	Ids -> id Ids                                      (6)
	Exp -> Nil                                         (7)
	Exp -> Cons                                        (8)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	':='           { DEFEQ posn }
	'='            { ISEQ  posn }
	'('            { LPAR  posn }
	')'            { RPAR  posn }
	'->'           { ARROW posn }
	'|'            { PIPE  posn }
	','            { COMMA posn }
	def            { DEF   posn }
	let            { LET   posn }
	in             { IN    posn }
	case           { CASE  posn }
	of             { OF    posn }
	Cons           { CONS  posn }
	Nil            { NIL   posn }
	id             { ID posn $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_prog     rule  0
	Prog            rule  1
	ProgDefns       rules 2, 3
	Defn            rule  4
	Ids             rules 5, 6
	Exp             rules 7, 8

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	def            shift, and enter state 4
	%eof           reduce using rule 2

	Prog           goto state 5
	ProgDefns      goto state 2
	Defn           goto state 3

State 1


	def            shift, and enter state 4

	ProgDefns      goto state 2
	Defn           goto state 3

State 2

	Prog -> ProgDefns .                                 (rule 1)

	%eof           reduce using rule 1


State 3

	ProgDefns -> Defn . ProgDefns                       (rule 3)

	def            shift, and enter state 4
	%eof           reduce using rule 2

	ProgDefns      goto state 7
	Defn           goto state 3

State 4

	Defn -> def . id Ids ':=' Exp                       (rule 4)

	id             shift, and enter state 6


State 5

	%start_prog -> Prog .                               (rule 0)

	%eof           accept


State 6

	Defn -> def id . Ids ':=' Exp                       (rule 4)

	':='           reduce using rule 5
	id             shift, and enter state 9

	Ids            goto state 8

State 7

	ProgDefns -> Defn ProgDefns .                       (rule 3)

	%eof           reduce using rule 3


State 8

	Defn -> def id Ids . ':=' Exp                       (rule 4)

	':='           shift, and enter state 11


State 9

	Ids -> id . Ids                                     (rule 6)

	':='           reduce using rule 5
	id             shift, and enter state 9

	Ids            goto state 10

State 10

	Ids -> id Ids .                                     (rule 6)

	':='           reduce using rule 6


State 11

	Defn -> def id Ids ':=' . Exp                       (rule 4)

	Cons           shift, and enter state 13
	Nil            shift, and enter state 14

	Exp            goto state 12

State 12

	Defn -> def id Ids ':=' Exp .                       (rule 4)

	def            reduce using rule 4
	%eof           reduce using rule 4


State 13

	Exp -> Cons .                                       (rule 8)

	def            reduce using rule 8
	%eof           reduce using rule 8


State 14

	Exp -> Nil .                                        (rule 7)

	def            reduce using rule 7
	%eof           reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 9
Number of terminals: 15
Number of non-terminals: 6
Number of states: 15
